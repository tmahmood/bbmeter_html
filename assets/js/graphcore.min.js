function GraphCore(opts) {
	this.opts = opts == null ?  opts : {};
	this.colordict = {};
	this.event_set = false;
	this.loading = false;
}

var graphcore = new GraphCore();


GraphCore.prototype.drawChart = function(charttype, data, src) {
	  if (data == undefined) {
		  throw "No data provided";
	  }
	  $(src.container).append('<div id="highchart_graph"></div>');
	  var gp = new window[charttype]();
	  console.log(gp);
	  gp.set('container', '#highchart_graph');
	  gp.title = src.key;
	  gp.subtitle = src.scope;
	  gp.addData(data.values);
	  gp.draw();
	  console.log(data);
};



function DiscretBar() {
	this.container = null;
	this.title = null;
	this.subtitle = null;
	this.series = [];
}

DiscretBar.prototype.set = function(field, val) {
	this[field] = val;
	return this;
};

DiscretBar.prototype.addData = function(values) {
	for (var i in values) {
		var val = values[i]
		this.series.push({ name: val.label, y: val.value * 1 });
	}
};

DiscretBar.prototype.draw = function() {
	var me = this;

    $(me.container).highcharts({
        chart: {
            backgroundColor: '#FBFBFB',
			type: 'column' },
        title: { text: me.title },
        subtitle: { text: me.subtitle },
        xAxis: { type: 'category' },
        yAxis: { min: 0, title: { text: 'Percent' } },
		legend: { enabled: false },
	    tooltip: {
			headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
			pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}%</b><br/>'
		},
		plotOptions: {
			series: {
				borderWidth: 0,
				dataLabels: {
					enabled: true,
					format: '{point.y:.1f}%'
				}
			}
		},
        series: [{
			name: me.title,
            colorByPoint: true,
			data: me.series
		}]
    });
};


function Pie() {
	this.container = null;
	this.title = null;
	this.subtitle = null;
	this.series = [];
}

Pie.prototype.set = function(field, val) {
	this[field] = val;
	return this;
};

Pie.prototype.addData = function(values) {
	for (var i in values) {
		var val = values[i]
		this.series.push([ val.label, val.value * 1 ]);
	}
};

Pie.prototype.draw = function() {
	var me = this;
    $(me.container).highcharts({
        chart: {
            backgroundColor: '#FBFBFB',
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false
        },
        title: { text: me.title },
		subtitle: { text: me.subtitle },
        tooltip: { pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>' },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                    style: {
                        color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                    }
                }
            }
        },
        series: [{
            type: 'pie',
            name: me.title,
            data: me.series
		}]
    });
};

function SimpleLine(){
	this.container = null;
	this.title = null;
	this.subtitle = null;
	this.series = [];
	this.xtext = 'Date';
	this.ytext = 'Percentage';
}

SimpleLine.prototype.set = function(field, val) {
	this[field] = val;
	return this;
};

SimpleLine.prototype.addData = function(values) {
	for (var i in values) {
		var val = values[i]
		this.series.push({ name: val.key, data:  val.values });
	}
};


SimpleLine.prototype.draw = function() {
	var me = this;
	$(me.container).highcharts({
		chart: {
            backgroundColor: '#FBFBFB',
		},
		title: { text: me.title },
		subtitle: { text: me.subtitle },
		xAxis: {
			type: 'datetime',
			title: { text: me.xtext }
		},
		yAxis: { title: { text: me.ytext }, min: 0 },
		plotOptions: {
			spline: {
				marker: {
					enabled: true
				}
			}
		},
		series: me.series
	});
};


function GroupedMultiBar() {
	this.container = null;
	this.title = null;
	this.subtitle = null;
	this.series = [];
}

GroupedMultiBar.prototype.set = function(field, val) {
	this[field] = val;
	return this;
};

GroupedMultiBar.prototype.addData = function(d) {

	this.categories = d.categories;
	this.series = d.data;
	console.log(this.series);
};



GroupedMultiBar.prototype.draw = function() {

	var me = this;
    $(me.container).highcharts({
        chart: {
            backgroundColor: '#FBFBFB',
            type: 'column'
        },
        title: { text: me.title },
        subtitle: { text: me.subtitle },
        xAxis: {
            categories: me.categories
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Percentage'
            }
        },
        tooltip: {
            headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
            pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y:.1f}%</b></td></tr>',
            footerFormat: '</table>',
            shared: true,
            useHTML: true
        },
        plotOptions: {
            column: {
                pointPadding: 0.2,
                borderWidth: 0
            }
        },
        series: me.series
	});
};


function Visualizer(datafile, container, sepchar) {
	this.container = container;
	var me = this;
	this.data_points = {};
	this.data = [];
	this.headers = [];
	this.datafile = datafile;
	this.sepchar = sepchar;
	this.loading = false;
	this.onGraphToDisplayClick();
	this.onGroupMenuClick();
}

Visualizer.prototype.loadData = function(datafile, graph) {
	if (datafile == undefined) {
		datafile = this.datafile;
	}

	var me = this;
	me.questions_cleaned = [];

	$.getJSON(datafile, function(jdata) {

		me.data_points = jdata;
		me.groups = [];

		for (var ky in jdata) {
			if (ky == 0) {
				me.participants = jdata[ky].participants;
				me.scope = jdata[ky].scope;
				me.moe = jdata[ky].moe;
			}
			var grp = jdata[ky].group;
			if (grp != undefined) {
				if (me.groups.indexOf(grp) < 0) {
					me.groups.push(grp);
				}
			} else {
				jdata[ky]['group'] = 'No Group';
				if (me.groups.indexOf("No Group") < 0) {
					me.groups.push('No Group');
				}
			}
			me.questions_cleaned.push([jdata[ky].key, jdata[ky].type, jdata[ky].group]);
		}

		me.makeSideMenu();
		me.setGroupMenu();
		me.loading = false;

		if (graph != '' && graph != undefined) {
			var gtxt = '#' + graph;
			if (me.groups.length > 1) {
				var cls = $(gtxt)
								.parent()
								.attr('class')
								.split(' ')
								.shift();
				var gcls = '#gm_' + cls;
				$(gcls + ' a').trigger('click');
			}
			$(gtxt).trigger('click');

		} else {
			if (me.groups.length == 1) {
				$('#questionlist li a').first().trigger('click');
			} else {
				$('#groupmenu select').trigger('change');
			}
		}

		var html = []
		if (me.moe != undefined) {
			html.push('<span><b>Margin of Error:</b> ' + me.moe);
		}

		if (me.participants != undefined) {
			html.push('<b>Participants:</b> ' + me.participants + '</span>');
		}


		$('#surveyinfo').html('<div><strong>' + me.scope + '</strong></div>' + html.join(', '));
	});

	return this;
};

Visualizer.prototype.onPageLoad = function() {
	this.width = $('main').width();
	this.height = $(document).height();
	return this;
};

Visualizer.prototype.makeSideMenu = function() {
	this.drawQuestionList();
	$('svg').text("");
	return this;
}

Visualizer.prototype.drawQuestionList = function() {

	var me = this;
	$('#questionlist').empty();

	for (var i = 0, len = me.questions_cleaned.length; i < len; i++) {
		var d = me.questions_cleaned[i];
		var cn = d[2].replace(/ /g, '_');
		var tid =  i + "_" + d[1];
		var li = createElement({ element: 'li', class: cn });
		var lk = createElement({ element: 'a', id: tid,
									class: 'selgraphtodisplay',
									attr: { href: "#" + tid },
									text: d[0] });
		$(li).append(lk)
		$('#questionlist').append(li);
	}
};

Visualizer.prototype.setGroupMenu = function() {
	var me = this;

	$('#groupmenu').empty();
	if (me.groups.length <= 1) {
		return;
	}

	if ($('#groupmenu select').length == 0) {
		$('#groupmenu').append('<select></select>');
	} else {
		$('#groupmenu select').empty();
	}

	for (var i = 0, len = me.groups.length; i < len; i++) {
		var d = me.groups[i];
		var cn = d.replace(/ /g, '_');
		var li = createElement({ element: 'option', prop: { value: cn },
								class: 'gmenu_items', text: d });
		$('#groupmenu select').append(li);
	}

}


Visualizer.prototype.onGraphToDisplayClick = function() {

	var me = this;
	$(document).on('click', '.selgraphtodisplay', function(ev){
		ev.preventDefault();

		$('#questionlist li').removeClass('active');
		$(this).parent().addClass('active');


		var dictkey = this.href.split('#').pop().split('_');
		var currentdata = me.data_points[dictkey[0]]

		var h = dictkey.join('_');

		var th = document.location.hash.split(',').shift();
		document.location.hash = th + ',' + h;

		graphcore.drawChart(dictkey[1], currentdata , me);

		$(me.container + ' h3').text($(this).text());

		var cnt = me.container + ' p#gp_details';
		$(cnt).empty();
		if (currentdata['description']!= undefined) {
			$(cnt).append(currentdata.description);
		}

		var date = currentdata['date'];
		var cnt = me.container + ' p#gp_date';
		$(cnt).empty();
		if (date != undefined) {
			$(cnt).append(date);
		}
	});
};

Visualizer.prototype.onGroupMenuClick = function() {
	$(document).on('change', '#groupmenu select', function(ev){
			var toshow = $(this).find(':selected').val();
			$('#questionlist li').hide();
			$('#questionlist .' + toshow).show();
			$('#questionlist li:visible a').first().trigger('click');
		}
	);
};

