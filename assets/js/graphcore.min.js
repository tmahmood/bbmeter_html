function GraphCore(opts) {
	this.opts = opts == null ?  opts : {};
	this.colordict = {};
}

var graphcore = new GraphCore();

GraphCore.prototype.initSVG = function(container) {
	return d3.select(container)
				.append("svg")
				.attr('class', 'container');
};

GraphCore.prototype.initg = function(uid, perent) {
	if (perent != undefined) {
		return perent.append('g').attr('id', uid);
	}
	return this.svg.append("g").attr('id', uid);
};

GraphCore.prototype.generateColor = function(d) {
	if (d in this.colordict) {
		return this.colordict[d];
	}

	var r = Math.random(1,50) * 250;
	var g = Math.random(1,50) * 250;
	var b = Math.random(1,50) * 250;

	this.colordict[d] = d3.rgb(r, g, b);

	var values = core.list_values(this.colordict);

	if (this.colordict in values) {
		return generateColor(d);
	}

	return this.colordict[d];
}


GraphCore.prototype.drawChart = function(charttype, data, me) {
	  if (data == undefined) {
		  throw "No data provided";
	  }
	  this[charttype](data, me);
};


GraphCore.prototype.Pie = function(_data, me) {
	//Regular pie chart example
	var data = _data[0].values;
	nv.addGraph(function() {
	  var chart = nv.models.pieChart()
		  .x(function(d) { return d.label })
		  .y(function(d) { return d.value })
		  .showLabels(true);

		d3.select(me.container + ' svg').text("")
			.datum(data)
			.transition()
			.duration(350)
			.call(chart);

		  return chart;
	});
}


GraphCore.prototype.DiscretBar = function(data, me) {

	  nv.addGraph(function() {
			 var chart = nv.models.discreteBarChart()
					.x(function(d) { return d.label; })
					.y(function(d) { return d.value / 100; })
					.staggerLabels(true)
					.tooltips(true)
					.showValues(false)

			chart.yAxis.tickFormat(d3.format('%'));

			d3.select(me.container + ' svg').text("")
					.datum(data)
					.transition()
					.duration(0)
					.call(chart);
			nv.utils.windowResize(chart.update);
			return chart;
		});
}


GraphCore.prototype.GroupedMultiBar= function(_data, me) {
	var data = _data[0].values;
	nv.addGraph(function() {
		var chart = nv.models.multiBarChart()
		  .transitionDuration(1500)
		  .reduceXTicks(true)   //If 'false', every single x-axis tick label will be rendered.
		  .rotateLabels(0)      //Angle to rotate x-axis labels.
		  .showControls(true)   //Allow user to switch between 'Grouped' and 'Stacked' mode.
		  .groupSpacing(0.1)    //Distance between each group of bars.
		  .x(function(d){ return d.label; })
		  .y(function(d){ return d.value / 100; })
		;

		chart.yAxis.tickFormat(d3.format('%'));
		d3.select(me.container + ' svg').text("")
			.datum(data)
			.call(chart);

		nv.utils.windowResize(chart.update);

		return chart;
	});
}

GraphCore.prototype.SimpleLine1= function(error, data) {
    nv.addGraph(function() {
        var chart = nv.models.lineWithFocusChart()
        .x(function(d) { return d[0] })
        .y(function(d) { return d[1] / 100 })
        .transitionDuration(750)  
        .showLegend(true)      
  ;
 
    chart.xAxis
.tickValues([1354286240000,1364740640000,1367332640000,1375281440000,1383230240000,1385822240000,1391179040000]) //note: using epoch time = milliseconds since 1/1/1970
        .tickFormat(function(d) {return d3.time.format('%m/%y')(new Date(d))})
        .axisLabel('Month / Year')
    ;
    
    chart.x2Axis            
 .tickValues([1354286240000,1364740640000,1367332640000,1375281440000,1383230240000,1385822240000,1391179040000]) 
        .tickFormat(function(d) {return d3.time.format('%m/%y')(new Date(d))});
  
    chart.yAxis     
        .tickFormat(d3.format('%x'))
        .axisLabel('Percentage');

    chart.y2Axis
        .tickFormat(d3.format('%x'))
        .axisLabel('Percentage');

  d3.select(me.container + ' svg ').text("")
      .datum(data)
      .transition().duration(500)
      .call(chart);

  nv.utils.windowResize(chart.update);

  return chart;
});
}

GraphCore.prototype.SimpleLine2= function(error, data) {
nv.addGraph(function() {
  var chart = nv.models.lineWithFocusChart()
        .x(function(d) { return d[0] })
        .y(function(d) { return d[1] / 100 })
        .transitionDuration(750)  
        .showLegend(true)       
  ;
 
    
    chart.xAxis
 .tickValues([1354286240000,1364740640000,1367332640000,1375281440000,1383230240000,1385822240000,1391179040000]) //note: using epoch time = milliseconds since 1/1/1970
        .tickFormat(function(d) {
        return d3.time.format('%m/%y')(new Date(d))
          })
        .axisLabel('Month / Year')
    ;
    
    chart.x2Axis            
 .tickValues([1354286240000,1364740640000,1367332640000,1375281440000,1383230240000,1385822240000,1391179040000]) //note: using epoch time = milliseconds since 1/1/1970
        .tickFormat(function(d) {
        return d3.time.format('%m/%y')(new Date(d))
          });
  
    chart.yAxis     //Chart y-axis settings
        .tickFormat(d3.format('%x'))
        .axisLabel('Percentage');

    chart.y2Axis
        .tickFormat(d3.format('%x'))
        .axisLabel('Percentage');


  d3.select(me.container + ' svg ').text("")
      .datum(data)
      .transition().duration(500)
      .call(chart);

  nv.utils.windowResize(chart.update);

  return chart;
})
};
;
    

GraphCore.prototype.makeSideMenu = function(me, sepchar) {

	d3.select('#questionlist').text("")
		.selectAll('li').data(me.questions_cleaned)
		.enter()
			.append('li')
				.append('a')
					.attr('href', function(d, i) { return "#" + i + "_" + d[1]; })
					.attr('class', 'selgraphtodisplay')
					.text(function(d){ return d[0]; });

	d3.select('svg').text("");

	$(document).on('click', '.selgraphtodisplay', function(ev){
		ev.preventDefault();
		$('#questionlist li').removeClass('active');
		$(this).parent().addClass('active');
		var dictkey = this.href.split('#').pop().split('_');
		graphcore.drawChart(dictkey[1], [me.data_points[dictkey[0]]] , me);
		d3.select(me.container + ' h1').text($(this).text());
	});

	$('#questionlist li a').first().trigger('click');

	return this;
};


function Visualizer(datafile, container, sepchar) {
	this.container = container;
	var me = this;
	this.data_points = {};
	this.data = [];
	this.headers = [];
	this.datafile = datafile;
	this.sepchar = sepchar;
}

Visualizer.prototype.loadData = function(datafile) {
	if (datafile == undefined) {
		datafile = this.datafile;
	}
	var me = this;
	me.questions_cleaned = [];
	d3.json(datafile, function(jdata){
			me.data_points = jdata;
			for (var ky in jdata) {
				me.questions_cleaned.push([jdata[ky].key, jdata[ky].type]);
			}
			graphcore.makeSideMenu(me);
		});
	return this;
};

Visualizer.prototype.onPageLoad = function() {
	this.width = $('main').width();
	this.height = $(document).height();
	this.svg = graphcore.initSVG(this.container);
	return this;
};
